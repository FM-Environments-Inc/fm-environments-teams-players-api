type Region {
  name: String!
}

type Country {
  name: String!
}

type PlayerRatings {
  overall: Float!
  pace: Float!
  shot: Float!
  pass: Float!
  dribbling: Float!
  defending: Float!
  physics: Float!
}

type ProbabilityBonuses {
  GOAL: String!
  SAVE: String!
  BALL_TACLE: String!
  PASS: String!
  LONG_PASS: String!
  HEADING: String!
}

type Player {
  _id: String!
  firstName: String!
  lastName: String!
  height: Float!
  age: Float!
  evaluation: Float!
  photo: String!
  active: Boolean!
  country: Country!
  role: String!
  position: String!
  ratings: PlayerRatings!
  probabilityBonuses: ProbabilityBonuses!
  deletedAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
scalar DateTime

type TeamPlayers {
  _id: String!
  position: String!
  reference: Player!
  createdAt: DateTime!
}

type Team {
  _id: String!
  name: String!
  logo: String!
  country: Country!
  region: Region!
  environment: String!
  division: Float!
  isNational: Boolean!
  evaluation: Float!
  players: TeamPlayers!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  archivedAt: DateTime!
}

type Query {
  region(name: String!): Region
  regions: [Region!]!
  country(name: String!): Country
  countries: [Country!]!
  player(id: String!): Player
  players(
    environment: String!
    country: String = null
    sortBy: String = "evaluation"
    role: String = null
    order: String = "DESC"
    page: Float = 1
    limit: Float = 30
  ): [Player!]!
  team(id: String!): Team
  teams(
    environment: String!
    isNational: Boolean = false
    country: String = null
    region: String = null
    sortBy: String = "evaluation"
    order: String = "DESC"
    page: Float = 1
    limit: Float = 30
  ): [Team!]!
}

type Mutation {
  createEnvironment(createCountryData: CreateCountryInput!): Country!
}

input CreateCountryInput {
  name: String!
  region: String!
}

